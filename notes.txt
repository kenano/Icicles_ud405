------------------
- Implement the difficulty level screen.
    - Add constants for the buttons to be created, scaling factor for text in buttons, radius factor,
      text for buttons.
    - In IciclesGame implement method showIciclesScreen which has parameter Difficulty. start
    IciclesScreen (the game) based on this input.
    - In DifficultyScreen create SprintBatch, ShapeRender, BitmapFont, FitViewport.
        - Extend this class to be a InputAdapter.
        - Set the font scale.
        - Draw buttons (circles) with shaperender
        - Set spritebatch projection matrix.
        - use GlyphLayout to calculate spacing needed to render the text in correct centered spot
            in buttons.
        - Override touchDown so input inside the circles will invoked desired button functionality.
            ie to start game at selected difficulty.
------------------
- Add difficulty levels.
    - In constants create enum DIFFICULTY which defines instances of the different difficulties.
        COLD, COLDER, COLDEST. Each instance defines the text value ot be displayed in the hud
        and the float which controls the amount of icicles being generated.
    - IciclesGame should create a IciclesScreen with a DIFFICULTY.
    - IciclesScreen will call Icicles with the set DIFFICULTY and also print the current difficulty
        on the hud.
    - Icicles should use the spawn rate defined in the enum to generate the icicles.
------------------
- Add functionality to keep track of deaths,score and high score. Add a HUD to IciclesScreen which
    displays this info.
    - In IciclesScreen SpriteBatch is used to render text.
    - Use ScreenViewport for the HUD.
    - BitmapFont for drawing the txt.
    - In resize() update the hud viewport, make sure to center the camera.
        - Calculate the bitmap font size based on screen size.
    - In IcicleScreen.render(), calculate high score.
        - draw hud using margins from Constants.
    - In Icicles keep track of number of dodged icicles. This is the current score.
        - in init() set to 0.
        - calculate current number of dodged icicles in update().
    - In Player keep track of number of deaths.
        - in init() set to 0.
        - calculate current number of deaths in update().
------------------
- When icicles go off screen they dont need to be in memory anymore. If they are not removed
    app will slow down due to lack of memory. However it is difficult to remove an item from an
    data structure while it is being iterated over. LibGDX has a class DelayedRemovalArray that
    allows items to be removed while it is being iterated over. Use this class to store the Icicles.
- Add collision detection to the player. Go through the Icicles and if the lower point of the icicle
    is within the radius of the player head there is a collision.
------------------
- Add constants for icicles. Icicle spawn rate an acceleration.
- Implement Icicle. Methods update (this is where velocity, position is calculated for each Icicle.
- Implement Icicles class which creates an array icicles at random locations (at top of window).
    Also implement, render, update, init, constructor.
- Add Icicles to IcicleScreen.
------------------
- Set up classes for:
	- Constants
	- DifficultyScreen should implement Screen.make sure to add methods to be implemented.
	- Player
	- Icicles
	- IciclesScreen, should implement Screen, make sure to add methods to be implemented.
	- Icicle
- Change default code created in IciclesGame.
    - change parent class being extended from ApplicationAdapter to Game.
    - remove render method and code inside create().
- add log tags to classes.
------------------
Define constants
	- Color for background, icicle.
	- size of world
	- size of icicle.
- Implement Icicle
	- member variables: vector for position
	- constructor parameter: position, sets position
	- implement render method
		- setColor
		- user shaperender to draw icicle.
- Implement IciclesScreen
	- member variables: shaperender, icicle, extendedviewport
	- Override show()
		- create shaperender
		- setAutoShapeType(true)
		- Create a new Icicle in the middle of the world
	- Override render
		- clear the background
		- Set the ShapeRenderer's projection matrix
		- Draw the Icicle
	- override resize
		- Ensure that the viewport updates correctly
	- override dispose
		- dispose of shaperender
-------------------
Create a class for the player
	- define contstants to draw player.
	- set up player class, add position vector, viewport member variables.
	-  Add constructor that accepts and sets the viewport, then calls init()
	-  Add init() function that moves the character to the bottom center of the screen
	- Create a render function that accepts ShapeRenderer and does the  drawing
	- add player to the IcicleScreen class.
		- add instance variable for player
		- initialize it in show()
		- call player.render in render
		- Reset the player (using init())
--------------------
Add keyboard input/movement.
	- add a member variable to store the velocity
	- instantiate this in init.
	- add a constant for the player speed. the velocity of the player is calculated by using this as a factor.
	- add method update to player which updates the position of the player based on input.
	-  Use Gdx.input.isKeyPressed() to move the player in the appropriate direction when an arrow key is pressed
	- add function to ensure the player is within the viewport
	- Call update() on player in IciclesScreen
--------------------
Add Icicles
    - Add constants for icicle spawn rate and icilcle velocity.
